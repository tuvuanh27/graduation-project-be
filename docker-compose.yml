version: '3'

services:
  api-gateway:
    container_name: api-gateway
    image: api-gateway
    build: .
    command: nest start api-gateway
    ports:
      - 5000:5000
    depends_on:
      - kafka
      - redis
    volumes:
      - /app/dist
      - /app/node_modules
      - .:/app

  crawler:
    container_name: crawler
    image: crawler
    build: .
    command: nest start crawler
    ports:
      - 3001:3001
    depends_on:
      - kafka
      - redis
    volumes:
      - /app/dist
      - /app/node_modules
      - .:/app

  uploader: 
    container_name: uploader
    image: uploader
    build: .
    command: nest start uploader
    ports:
      - 3002:3002
    depends_on:
      - kafka
      - redis
      - ipfs-kubo
    volumes:
      - /app/dist
      - /app/node_modules
      - .:/app

  redis:
    image: "redis:alpine"
    command: redis-server
    ports:
      - 6379:6379
    volumes:
      - redis-data:/var/lib/redis
    environment:
      - REDIS_REPLICATION_MODE=master

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181

  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:latest
    # network_mode: host
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
      - 9093:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  
  schema-registry:
    image: confluentinc/cp-schema-registry
    depends_on:
      - kafka
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'PLAINTEXT://kafka:9092'
      SCHEMA_REGISTRY_HOST_NAME: 'schema-registry'
      SCHEMA_REGISTRY_LISTENERS: 'http://0.0.0.0:8085'
      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: 'INFO'

  kafka-ui:
    image: provectuslabs/kafka-ui
    depends_on:
      - kafka
    ports:
      - 8081:8080
    environment:
      KAFKA_CLUSTERS_0_NAME: docker-kafka-server
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092

  ipfs-kubo:
    image: ipfs/go-ipfs:v0.9.0
    ports:
      - 4001:4001
      - 5001:5001
      - 8080:8080
    volumes:
      - ipfs-data:/data/ipfs
    command: daemon
      

volumes:
  redis-data:
    name: redis-data
  ipfs-data:
    name: ipfs-data